  &ubp.Blueprint{
  	... // 16 identical fields
  	OpenSCAP:     nil,
  	Registration: nil,
  	Storage: &ubp.Storage{
  		Minsize: 590558003200,
  		Partitions: []ubp.StoragePartition{
  			{union: Inverse(RawMessage, map[string]any{"fs_type": string("ext4"), "label": string("boot"), "minsize": string("800 MiB"), "mountpoint": string("/boot"), ...})},
  			{union: Inverse(RawMessage, map[string]any{"fs_type": string("xfs"), "label": string("root"), "minsize": string("40 GiB"), "mountpoint": string("/"), ...})},
  			{
  				union: json.RawMessage(Inverse(RawMessage, map[string]any{
  					"logical_volumes": []any{
  						map[string]any{
- 							"fs_type": string("xfs"),
+ 							"fs_type": string("ext4"),
  							"label":   string("vg_data_var"),
  							"minsize": string("50 GiB"),
  							... // 2 identical entries
  						},
  					},
  					"minsize": string("90 GiB"),
  					"name":    string("vg_data"),
  					"type":    string("lvm"),
  				})),
  			},
  			{union: Inverse(RawMessage, map[string]any{"minsize": string("50 GiB"), "subvolumes": []any{map[string]any{"mountpoint": string("/var/backups"), "name": string("root")}}, "type": string("btrfs")})},
  			{
  				union: json.RawMessage(Inverse(RawMessage, map[string]any{
+ 					"fs_type": string("ext4"),
  					"label":   string("plain-bytes"),
- 					"minsize": string("1000000000"),
+ 					"minsize": string("1 GB"),
  					"type":    string("plain"),
  				})),
  			},
  			{
  				union: json.RawMessage(Inverse(RawMessage, map[string]any{
+ 					"fs_type": string("ext4"),
  					"label":   string("plain-mib"),
  					"minsize": string("100 MiB"),
  					"type":    string("plain"),
  				})),
  			},
  		},
  		Type: s"gpt",
  	},
  	Systemd:  nil,
  	Timedate: nil,
  }
