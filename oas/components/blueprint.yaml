---
description: |-
  Image Builder new blueprint schema.

  THIS IS WORK IN PROGRESS
type: object
properties:
  name:
    description: |
      The name attribute is a string that contains the name of the blueprint.
      It can contain spaces, but they may be converted to dash characters during build.
      It should be short and descriptive.
    type: string
    x-go-type-skip-optional-pointer: true
    x-omitempty: true
  description:
    description: |
      The description attribute is a string that can be a longer description
      of the blueprint and is only used for display purposes.
    type: string
    x-go-type-skip-optional-pointer: true
  accounts:
    "$ref": "accounts.yaml"
    nullable: true
  cacerts:
    description: |
      The CA certificates to be added to the image. The certificates
      are added to the system-wide CA trust store. The certificates are added to
      the /etc/pki/ca-trust/source/anchors/ directory and the update-ca-trust command
      is run to update the system-wide CA trust store.
    type: array
    items:
      "$ref": "ca_cert.yaml"
    x-go-type-skip-optional-pointer: true
    x-go-name: CACerts
    x-omitempty: true
  containers:
    description: |
      Containers to be pulled during the image build and stored in the
      image at the default local container storage location that is appropriate
      for the image type, so that all supported container tools like podman and
      cri-o will be able to work with it. The embedded containers are not started,
      to do so you can create systemd unit files or quadlets with the files customization.
    type: array
    items:
      "$ref": "container.yaml"
    x-go-type-skip-optional-pointer: true
    x-omitempty: true
  dnf:
    "$ref": "dnf.yaml"
    nullable: true
    x-go-name: DNF
  fips:
    "$ref": "fips.yaml"
    nullable: true
    x-go-name: FIPS
  fsnodes:
    description: |
      File system nodes details.

      You can use the customization to create new files or to replace existing ones,
      if not restricted by the policy specified below. If the target path is an existing
      symlink to another file, the symlink will be replaced by the custom file.

      Please note that the parent directory of a specified file must exist. If it does
      not exist, the image build will fail. One can ensure that the parent directory
      exists by specifying "ensure_parents".

      In addition, the following files are not allowed to be created or replaced by
      policy: /etc/fstab, /etc/shadow, /etc/passwd and /etc/group.

      Using the files customization comes with a high chance of creating an image that
      doesn't boot. Use this feature only if you know what you are doing. Although the
      files customization can be used to configure parts of the OS which can also be
      configured by other blueprint customizations, this use is discouraged. If possible,
      users should always default to using the specialized blueprint customizations.
      Note that if you combine the files customizations with other customizations, the
      other customizations may not work as expected or may be overridden by the files
      customizations.

      You can create custom directories as well. The existence of a specified directory
      is handled gracefully only if no explicit mode, user or group is specified. If any
      of these customizations are specified and the directory already exists in the
      image, the image build will fail. The intention is to prevent changing the
      ownership or permissions of existing directories.
    type: array
    items:
      "$ref": "fsnode.yaml"
    x-go-name: FSNodes
    x-go-type-skip-optional-pointer: true
  hostname:
    description: |
      Hostname is an optional string that can be used to configure the
      hostname of the final image.
    type: string
    x-go-type-skip-optional-pointer: true
  ignition:
    description: |
      Provides Ignition configuration files to be used in edge-raw-image and
      edge-simplified-installer images. Check the RHEL for Edge butane specification for
      a description of the supported configuration options.

      The blueprint configuration can be done either by embedding an Ignition configuration
      file into the image, or providing a provisioning URL that will be fetched at first boot.
    oneOf:
      - "$ref": "ignition_url.yaml"
      - "$ref": "ignition_text.yaml"
    x-go-name: Ignition
    x-go-type-name: Ignition
    x-omitempty: true
  installer:
    "$ref": "installer.yaml"
    nullable: true
  kernel:
    "$ref": "kernel.yaml"
    nullable: true
  locale:
    "$ref": "locale.yaml"
    nullable: true
  network:
    "$ref": "network.yaml"
    nullable: true
  openscap:
    "$ref": "openscap.yaml"
    nullable: true
  registration:
    "$ref": "registration.yaml"
    nullable: true
  storage:
    "$ref": "storage.yaml"
    nullable: true
  systemd:
    "$ref": "systemd.yaml"
    nullable: true
  timedate:
    "$ref": "time_date.yaml"
    nullable: true
additionalProperties: false
