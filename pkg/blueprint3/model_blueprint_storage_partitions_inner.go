/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlueprintStoragePartitionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintStoragePartitionsInner{}

// BlueprintStoragePartitionsInner struct for BlueprintStoragePartitionsInner
type BlueprintStoragePartitionsInner struct {
	// Partition type: plain (default), lvm, or btrfs.
	Type string `json:"type"`
	// File system type: ext4 (default), xfs, swap, or vfat.  Relevant for partition types: plain.
	FsType *string `json:"fs_type,omitempty"`
	// Label of the partition.  Relevant for partition types: plain.
	Label *string `json:"label,omitempty"`
	// LVM logical volumes to create within the volume group.  Relevant for partition types: lvm.
	LogicalVolumes []BlueprintStoragePartitionsInnerLogicalVolumesInner `json:"logical_volumes,omitempty"`
	// Minimum size of the volume.  Size must be formatted as an integer followed by whitespace and then either a decimal unit (B, KB/kB, MB, GB, TB, PB, EB) or binary unit (KiB, MiB, GiB, TiB, PiB, EiB).  Relevant for partition types: plain, lvm, btrfs.
	Minsize *string `json:"minsize,omitempty" validate:"regexp=^\\\\d+\\\\s*[BKkMGTPE]i?[BKMGTPE]?$"`
	// Mount point of the partition. Required except for swap fs_type.  Relevant for partition types: plain.
	Mountpoint *string `json:"mountpoint,omitempty" validate:"regexp=^\\/"`
	// LVM volume group name. When not set, will be generated automatically.  Relevant for partition types: lvm.
	Name *string `json:"name,omitempty"`
	// BTRFS subvolumes to create.  Relevant for partition types: btrfs.
	Subvolumes []BlueprintStoragePartitionsInnerSubvolumesInner `json:"subvolumes,omitempty"`
}

type _BlueprintStoragePartitionsInner BlueprintStoragePartitionsInner

// NewBlueprintStoragePartitionsInner instantiates a new BlueprintStoragePartitionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintStoragePartitionsInner(type_ string) *BlueprintStoragePartitionsInner {
	this := BlueprintStoragePartitionsInner{}
	return &this
}

// NewBlueprintStoragePartitionsInnerWithDefaults instantiates a new BlueprintStoragePartitionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintStoragePartitionsInnerWithDefaults() *BlueprintStoragePartitionsInner {
	this := BlueprintStoragePartitionsInner{}
	var type_ string = "plain"
	this.Type = type_
	var fsType string = "ext4"
	this.FsType = &fsType
	return &this
}

// GetType returns the Type field value
func (o *BlueprintStoragePartitionsInner) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BlueprintStoragePartitionsInner) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BlueprintStoragePartitionsInner) SetType(v string) {
	o.Type = v
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *BlueprintStoragePartitionsInner) GetFsType() string {
	if o == nil || IsNil(o.FsType) {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintStoragePartitionsInner) GetFsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FsType) {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *BlueprintStoragePartitionsInner) HasFsType() bool {
	if o != nil && !IsNil(o.FsType) {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *BlueprintStoragePartitionsInner) SetFsType(v string) {
	o.FsType = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *BlueprintStoragePartitionsInner) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintStoragePartitionsInner) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *BlueprintStoragePartitionsInner) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *BlueprintStoragePartitionsInner) SetLabel(v string) {
	o.Label = &v
}

// GetLogicalVolumes returns the LogicalVolumes field value if set, zero value otherwise.
func (o *BlueprintStoragePartitionsInner) GetLogicalVolumes() []BlueprintStoragePartitionsInnerLogicalVolumesInner {
	if o == nil || IsNil(o.LogicalVolumes) {
		var ret []BlueprintStoragePartitionsInnerLogicalVolumesInner
		return ret
	}
	return o.LogicalVolumes
}

// GetLogicalVolumesOk returns a tuple with the LogicalVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintStoragePartitionsInner) GetLogicalVolumesOk() ([]BlueprintStoragePartitionsInnerLogicalVolumesInner, bool) {
	if o == nil || IsNil(o.LogicalVolumes) {
		return nil, false
	}
	return o.LogicalVolumes, true
}

// HasLogicalVolumes returns a boolean if a field has been set.
func (o *BlueprintStoragePartitionsInner) HasLogicalVolumes() bool {
	if o != nil && !IsNil(o.LogicalVolumes) {
		return true
	}

	return false
}

// SetLogicalVolumes gets a reference to the given []BlueprintStoragePartitionsInnerLogicalVolumesInner and assigns it to the LogicalVolumes field.
func (o *BlueprintStoragePartitionsInner) SetLogicalVolumes(v []BlueprintStoragePartitionsInnerLogicalVolumesInner) {
	o.LogicalVolumes = v
}

// GetMinsize returns the Minsize field value if set, zero value otherwise.
func (o *BlueprintStoragePartitionsInner) GetMinsize() string {
	if o == nil || IsNil(o.Minsize) {
		var ret string
		return ret
	}
	return *o.Minsize
}

// GetMinsizeOk returns a tuple with the Minsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintStoragePartitionsInner) GetMinsizeOk() (*string, bool) {
	if o == nil || IsNil(o.Minsize) {
		return nil, false
	}
	return o.Minsize, true
}

// HasMinsize returns a boolean if a field has been set.
func (o *BlueprintStoragePartitionsInner) HasMinsize() bool {
	if o != nil && !IsNil(o.Minsize) {
		return true
	}

	return false
}

// SetMinsize gets a reference to the given string and assigns it to the Minsize field.
func (o *BlueprintStoragePartitionsInner) SetMinsize(v string) {
	o.Minsize = &v
}

// GetMountpoint returns the Mountpoint field value if set, zero value otherwise.
func (o *BlueprintStoragePartitionsInner) GetMountpoint() string {
	if o == nil || IsNil(o.Mountpoint) {
		var ret string
		return ret
	}
	return *o.Mountpoint
}

// GetMountpointOk returns a tuple with the Mountpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintStoragePartitionsInner) GetMountpointOk() (*string, bool) {
	if o == nil || IsNil(o.Mountpoint) {
		return nil, false
	}
	return o.Mountpoint, true
}

// HasMountpoint returns a boolean if a field has been set.
func (o *BlueprintStoragePartitionsInner) HasMountpoint() bool {
	if o != nil && !IsNil(o.Mountpoint) {
		return true
	}

	return false
}

// SetMountpoint gets a reference to the given string and assigns it to the Mountpoint field.
func (o *BlueprintStoragePartitionsInner) SetMountpoint(v string) {
	o.Mountpoint = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BlueprintStoragePartitionsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintStoragePartitionsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BlueprintStoragePartitionsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BlueprintStoragePartitionsInner) SetName(v string) {
	o.Name = &v
}

// GetSubvolumes returns the Subvolumes field value if set, zero value otherwise.
func (o *BlueprintStoragePartitionsInner) GetSubvolumes() []BlueprintStoragePartitionsInnerSubvolumesInner {
	if o == nil || IsNil(o.Subvolumes) {
		var ret []BlueprintStoragePartitionsInnerSubvolumesInner
		return ret
	}
	return o.Subvolumes
}

// GetSubvolumesOk returns a tuple with the Subvolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintStoragePartitionsInner) GetSubvolumesOk() ([]BlueprintStoragePartitionsInnerSubvolumesInner, bool) {
	if o == nil || IsNil(o.Subvolumes) {
		return nil, false
	}
	return o.Subvolumes, true
}

// HasSubvolumes returns a boolean if a field has been set.
func (o *BlueprintStoragePartitionsInner) HasSubvolumes() bool {
	if o != nil && !IsNil(o.Subvolumes) {
		return true
	}

	return false
}

// SetSubvolumes gets a reference to the given []BlueprintStoragePartitionsInnerSubvolumesInner and assigns it to the Subvolumes field.
func (o *BlueprintStoragePartitionsInner) SetSubvolumes(v []BlueprintStoragePartitionsInnerSubvolumesInner) {
	o.Subvolumes = v
}

func (o BlueprintStoragePartitionsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintStoragePartitionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.FsType) {
		toSerialize["fs_type"] = o.FsType
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.LogicalVolumes) {
		toSerialize["logical_volumes"] = o.LogicalVolumes
	}
	if !IsNil(o.Minsize) {
		toSerialize["minsize"] = o.Minsize
	}
	if !IsNil(o.Mountpoint) {
		toSerialize["mountpoint"] = o.Mountpoint
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Subvolumes) {
		toSerialize["subvolumes"] = o.Subvolumes
	}
	return toSerialize, nil
}

func (o *BlueprintStoragePartitionsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlueprintStoragePartitionsInner := _BlueprintStoragePartitionsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlueprintStoragePartitionsInner)

	if err != nil {
		return err
	}

	*o = BlueprintStoragePartitionsInner(varBlueprintStoragePartitionsInner)

	return err
}

type NullableBlueprintStoragePartitionsInner struct {
	value *BlueprintStoragePartitionsInner
	isSet bool
}

func (v NullableBlueprintStoragePartitionsInner) Get() *BlueprintStoragePartitionsInner {
	return v.value
}

func (v *NullableBlueprintStoragePartitionsInner) Set(val *BlueprintStoragePartitionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintStoragePartitionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintStoragePartitionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintStoragePartitionsInner(val *BlueprintStoragePartitionsInner) *NullableBlueprintStoragePartitionsInner {
	return &NullableBlueprintStoragePartitionsInner{value: val, isSet: true}
}

func (v NullableBlueprintStoragePartitionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintStoragePartitionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


