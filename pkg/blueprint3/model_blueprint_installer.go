/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BlueprintInstaller type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintInstaller{}

// BlueprintInstaller struct for BlueprintInstaller
type BlueprintInstaller struct {
	Anaconda *BlueprintInstallerAnaconda `json:"anaconda,omitempty"`
	Coreos *BlueprintInstallerCoreos `json:"coreos,omitempty"`
}

// NewBlueprintInstaller instantiates a new BlueprintInstaller object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintInstaller() *BlueprintInstaller {
	this := BlueprintInstaller{}
	return &this
}

// NewBlueprintInstallerWithDefaults instantiates a new BlueprintInstaller object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintInstallerWithDefaults() *BlueprintInstaller {
	this := BlueprintInstaller{}
	return &this
}

// GetAnaconda returns the Anaconda field value if set, zero value otherwise.
func (o *BlueprintInstaller) GetAnaconda() BlueprintInstallerAnaconda {
	if o == nil || IsNil(o.Anaconda) {
		var ret BlueprintInstallerAnaconda
		return ret
	}
	return *o.Anaconda
}

// GetAnacondaOk returns a tuple with the Anaconda field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintInstaller) GetAnacondaOk() (*BlueprintInstallerAnaconda, bool) {
	if o == nil || IsNil(o.Anaconda) {
		return nil, false
	}
	return o.Anaconda, true
}

// HasAnaconda returns a boolean if a field has been set.
func (o *BlueprintInstaller) HasAnaconda() bool {
	if o != nil && !IsNil(o.Anaconda) {
		return true
	}

	return false
}

// SetAnaconda gets a reference to the given BlueprintInstallerAnaconda and assigns it to the Anaconda field.
func (o *BlueprintInstaller) SetAnaconda(v BlueprintInstallerAnaconda) {
	o.Anaconda = &v
}

// GetCoreos returns the Coreos field value if set, zero value otherwise.
func (o *BlueprintInstaller) GetCoreos() BlueprintInstallerCoreos {
	if o == nil || IsNil(o.Coreos) {
		var ret BlueprintInstallerCoreos
		return ret
	}
	return *o.Coreos
}

// GetCoreosOk returns a tuple with the Coreos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintInstaller) GetCoreosOk() (*BlueprintInstallerCoreos, bool) {
	if o == nil || IsNil(o.Coreos) {
		return nil, false
	}
	return o.Coreos, true
}

// HasCoreos returns a boolean if a field has been set.
func (o *BlueprintInstaller) HasCoreos() bool {
	if o != nil && !IsNil(o.Coreos) {
		return true
	}

	return false
}

// SetCoreos gets a reference to the given BlueprintInstallerCoreos and assigns it to the Coreos field.
func (o *BlueprintInstaller) SetCoreos(v BlueprintInstallerCoreos) {
	o.Coreos = &v
}

func (o BlueprintInstaller) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintInstaller) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Anaconda) {
		toSerialize["anaconda"] = o.Anaconda
	}
	if !IsNil(o.Coreos) {
		toSerialize["coreos"] = o.Coreos
	}
	return toSerialize, nil
}

type NullableBlueprintInstaller struct {
	value *BlueprintInstaller
	isSet bool
}

func (v NullableBlueprintInstaller) Get() *BlueprintInstaller {
	return v.value
}

func (v *NullableBlueprintInstaller) Set(val *BlueprintInstaller) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintInstaller) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintInstaller) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintInstaller(val *BlueprintInstaller) *NullableBlueprintInstaller {
	return &NullableBlueprintInstaller{value: val, isSet: true}
}

func (v NullableBlueprintInstaller) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintInstaller) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


