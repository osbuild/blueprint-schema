/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BlueprintLocale type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintLocale{}

// BlueprintLocale struct for BlueprintLocale
type BlueprintLocale struct {
	// The keyboards attribute is a list of strings that contains the keyboards to be installed on the image. To list available keyboards, run: localectl list-keymaps
	Keyboards []string `json:"keyboards,omitempty"`
	// The languages attribute is a list of strings that contains the languages to be installed on the image. To list available languages, run: localectl list-locales
	Languages []string `json:"languages,omitempty"`
}

// NewBlueprintLocale instantiates a new BlueprintLocale object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintLocale() *BlueprintLocale {
	this := BlueprintLocale{}
	return &this
}

// NewBlueprintLocaleWithDefaults instantiates a new BlueprintLocale object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintLocaleWithDefaults() *BlueprintLocale {
	this := BlueprintLocale{}
	return &this
}

// GetKeyboards returns the Keyboards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintLocale) GetKeyboards() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Keyboards
}

// GetKeyboardsOk returns a tuple with the Keyboards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintLocale) GetKeyboardsOk() ([]string, bool) {
	if o == nil || IsNil(o.Keyboards) {
		return nil, false
	}
	return o.Keyboards, true
}

// HasKeyboards returns a boolean if a field has been set.
func (o *BlueprintLocale) HasKeyboards() bool {
	if o != nil && !IsNil(o.Keyboards) {
		return true
	}

	return false
}

// SetKeyboards gets a reference to the given []string and assigns it to the Keyboards field.
func (o *BlueprintLocale) SetKeyboards(v []string) {
	o.Keyboards = v
}

// GetLanguages returns the Languages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintLocale) GetLanguages() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintLocale) GetLanguagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Languages) {
		return nil, false
	}
	return o.Languages, true
}

// HasLanguages returns a boolean if a field has been set.
func (o *BlueprintLocale) HasLanguages() bool {
	if o != nil && !IsNil(o.Languages) {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given []string and assigns it to the Languages field.
func (o *BlueprintLocale) SetLanguages(v []string) {
	o.Languages = v
}

func (o BlueprintLocale) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintLocale) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Keyboards != nil {
		toSerialize["keyboards"] = o.Keyboards
	}
	if o.Languages != nil {
		toSerialize["languages"] = o.Languages
	}
	return toSerialize, nil
}

type NullableBlueprintLocale struct {
	value *BlueprintLocale
	isSet bool
}

func (v NullableBlueprintLocale) Get() *BlueprintLocale {
	return v.value
}

func (v *NullableBlueprintLocale) Set(val *BlueprintLocale) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintLocale) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintLocale) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintLocale(val *BlueprintLocale) *NullableBlueprintLocale {
	return &NullableBlueprintLocale{value: val, isSet: true}
}

func (v NullableBlueprintLocale) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintLocale) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


