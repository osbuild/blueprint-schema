/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BlueprintNetworkFirewall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintNetworkFirewall{}

// BlueprintNetworkFirewall struct for BlueprintNetworkFirewall
type BlueprintNetworkFirewall struct {
	// Services to enable or disable. The service can be defined via an assigned IANA name, port number or port range.  Services are processed in order, when a service is disabled and then accidentally enabled via a port or a port range, the service will be enabled in the end.  By default the firewall blocks all access, except for services that enable their ports explicitly such as the sshd.
	Services []BlueprintNetworkFirewallServicesInner `json:"services,omitempty"`
}

// NewBlueprintNetworkFirewall instantiates a new BlueprintNetworkFirewall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintNetworkFirewall() *BlueprintNetworkFirewall {
	this := BlueprintNetworkFirewall{}
	return &this
}

// NewBlueprintNetworkFirewallWithDefaults instantiates a new BlueprintNetworkFirewall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintNetworkFirewallWithDefaults() *BlueprintNetworkFirewall {
	this := BlueprintNetworkFirewall{}
	return &this
}

// GetServices returns the Services field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintNetworkFirewall) GetServices() []BlueprintNetworkFirewallServicesInner {
	if o == nil {
		var ret []BlueprintNetworkFirewallServicesInner
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintNetworkFirewall) GetServicesOk() ([]BlueprintNetworkFirewallServicesInner, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *BlueprintNetworkFirewall) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []BlueprintNetworkFirewallServicesInner and assigns it to the Services field.
func (o *BlueprintNetworkFirewall) SetServices(v []BlueprintNetworkFirewallServicesInner) {
	o.Services = v
}

func (o BlueprintNetworkFirewall) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintNetworkFirewall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Services != nil {
		toSerialize["services"] = o.Services
	}
	return toSerialize, nil
}

type NullableBlueprintNetworkFirewall struct {
	value *BlueprintNetworkFirewall
	isSet bool
}

func (v NullableBlueprintNetworkFirewall) Get() *BlueprintNetworkFirewall {
	return v.value
}

func (v *NullableBlueprintNetworkFirewall) Set(val *BlueprintNetworkFirewall) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintNetworkFirewall) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintNetworkFirewall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintNetworkFirewall(val *BlueprintNetworkFirewall) *NullableBlueprintNetworkFirewall {
	return &NullableBlueprintNetworkFirewall{value: val, isSet: true}
}

func (v NullableBlueprintNetworkFirewall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintNetworkFirewall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


