/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BlueprintInstallerAnacondaKickstart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintInstallerAnacondaKickstart{}

// BlueprintInstallerAnacondaKickstart struct for BlueprintInstallerAnacondaKickstart
type BlueprintInstallerAnacondaKickstart struct {
	// Kickstart file formatted in base64.
	Base64 *string
	// Kickstart file formatted in plain text.
	Text *string
}

// NewBlueprintInstallerAnacondaKickstart instantiates a new BlueprintInstallerAnacondaKickstart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintInstallerAnacondaKickstart() *BlueprintInstallerAnacondaKickstart {
	this := BlueprintInstallerAnacondaKickstart{}
	return &this
}

// NewBlueprintInstallerAnacondaKickstartWithDefaults instantiates a new BlueprintInstallerAnacondaKickstart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintInstallerAnacondaKickstartWithDefaults() *BlueprintInstallerAnacondaKickstart {
	this := BlueprintInstallerAnacondaKickstart{}
	return &this
}

// GetBase64 returns the Base64 field value if set, zero value otherwise.
func (o *BlueprintInstallerAnacondaKickstart) GetBase64() string {
	if o == nil || IsNil(o.Base64) {
		var ret string
		return ret
	}
	return *o.Base64
}

// GetBase64Ok returns a tuple with the Base64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintInstallerAnacondaKickstart) GetBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.Base64) {
		return nil, false
	}
	return o.Base64, true
}

// HasBase64 returns a boolean if a field has been set.
func (o *BlueprintInstallerAnacondaKickstart) HasBase64() bool {
	if o != nil && !IsNil(o.Base64) {
		return true
	}

	return false
}

// SetBase64 gets a reference to the given string and assigns it to the Base64 field.
func (o *BlueprintInstallerAnacondaKickstart) SetBase64(v string) {
	o.Base64 = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *BlueprintInstallerAnacondaKickstart) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintInstallerAnacondaKickstart) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *BlueprintInstallerAnacondaKickstart) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *BlueprintInstallerAnacondaKickstart) SetText(v string) {
	o.Text = &v
}

func (o BlueprintInstallerAnacondaKickstart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintInstallerAnacondaKickstart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Base64) {
		toSerialize["base64"] = o.Base64
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableBlueprintInstallerAnacondaKickstart struct {
	value *BlueprintInstallerAnacondaKickstart
	isSet bool
}

func (v NullableBlueprintInstallerAnacondaKickstart) Get() *BlueprintInstallerAnacondaKickstart {
	return v.value
}

func (v *NullableBlueprintInstallerAnacondaKickstart) Set(val *BlueprintInstallerAnacondaKickstart) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintInstallerAnacondaKickstart) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintInstallerAnacondaKickstart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintInstallerAnacondaKickstart(val *BlueprintInstallerAnacondaKickstart) *NullableBlueprintInstallerAnacondaKickstart {
	return &NullableBlueprintInstallerAnacondaKickstart{value: val, isSet: true}
}

func (v NullableBlueprintInstallerAnacondaKickstart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintInstallerAnacondaKickstart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


