/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BlueprintSystemd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintSystemd{}

// BlueprintSystemd struct for BlueprintSystemd
type BlueprintSystemd struct {
	// The disabled attribute is a list of strings that contains the systemd units to be disabled.
	Disabled []string `json:"disabled,omitempty"`
	// The enabled attribute is a list of strings that contains the systemd units to be enabled.
	Enabled []string `json:"enabled,omitempty"`
	// The masked attribute is a list of strings that contains the systemd units to be masked.
	Masked []string `json:"masked,omitempty"`
}

// NewBlueprintSystemd instantiates a new BlueprintSystemd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintSystemd() *BlueprintSystemd {
	this := BlueprintSystemd{}
	return &this
}

// NewBlueprintSystemdWithDefaults instantiates a new BlueprintSystemd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintSystemdWithDefaults() *BlueprintSystemd {
	this := BlueprintSystemd{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintSystemd) GetDisabled() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintSystemd) GetDisabledOk() ([]string, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *BlueprintSystemd) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given []string and assigns it to the Disabled field.
func (o *BlueprintSystemd) SetDisabled(v []string) {
	o.Disabled = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintSystemd) GetEnabled() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintSystemd) GetEnabledOk() ([]string, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *BlueprintSystemd) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given []string and assigns it to the Enabled field.
func (o *BlueprintSystemd) SetEnabled(v []string) {
	o.Enabled = v
}

// GetMasked returns the Masked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintSystemd) GetMasked() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Masked
}

// GetMaskedOk returns a tuple with the Masked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintSystemd) GetMaskedOk() ([]string, bool) {
	if o == nil || IsNil(o.Masked) {
		return nil, false
	}
	return o.Masked, true
}

// HasMasked returns a boolean if a field has been set.
func (o *BlueprintSystemd) HasMasked() bool {
	if o != nil && !IsNil(o.Masked) {
		return true
	}

	return false
}

// SetMasked gets a reference to the given []string and assigns it to the Masked field.
func (o *BlueprintSystemd) SetMasked(v []string) {
	o.Masked = v
}

func (o BlueprintSystemd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintSystemd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Masked != nil {
		toSerialize["masked"] = o.Masked
	}
	return toSerialize, nil
}

type NullableBlueprintSystemd struct {
	value *BlueprintSystemd
	isSet bool
}

func (v NullableBlueprintSystemd) Get() *BlueprintSystemd {
	return v.value
}

func (v *NullableBlueprintSystemd) Set(val *BlueprintSystemd) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintSystemd) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintSystemd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintSystemd(val *BlueprintSystemd) *NullableBlueprintSystemd {
	return &NullableBlueprintSystemd{value: val, isSet: true}
}

func (v NullableBlueprintSystemd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintSystemd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


