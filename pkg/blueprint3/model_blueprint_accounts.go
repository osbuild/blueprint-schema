/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BlueprintAccounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintAccounts{}

// BlueprintAccounts struct for BlueprintAccounts
type BlueprintAccounts struct {
	// Operating system group accounts to be created on the image.
	Groups []BlueprintAccountsGroupsInner `json:"groups,omitempty"`
	// Operating system user accounts to be created on the image.
	Users []BlueprintAccountsUsersInner `json:"users,omitempty"`
}

// NewBlueprintAccounts instantiates a new BlueprintAccounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintAccounts() *BlueprintAccounts {
	this := BlueprintAccounts{}
	return &this
}

// NewBlueprintAccountsWithDefaults instantiates a new BlueprintAccounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintAccountsWithDefaults() *BlueprintAccounts {
	this := BlueprintAccounts{}
	return &this
}

// GetGroups returns the Groups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintAccounts) GetGroups() []BlueprintAccountsGroupsInner {
	if o == nil {
		var ret []BlueprintAccountsGroupsInner
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintAccounts) GetGroupsOk() ([]BlueprintAccountsGroupsInner, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *BlueprintAccounts) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []BlueprintAccountsGroupsInner and assigns it to the Groups field.
func (o *BlueprintAccounts) SetGroups(v []BlueprintAccountsGroupsInner) {
	o.Groups = v
}

// GetUsers returns the Users field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintAccounts) GetUsers() []BlueprintAccountsUsersInner {
	if o == nil {
		var ret []BlueprintAccountsUsersInner
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintAccounts) GetUsersOk() ([]BlueprintAccountsUsersInner, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *BlueprintAccounts) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []BlueprintAccountsUsersInner and assigns it to the Users field.
func (o *BlueprintAccounts) SetUsers(v []BlueprintAccountsUsersInner) {
	o.Users = v
}

func (o BlueprintAccounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintAccounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableBlueprintAccounts struct {
	value *BlueprintAccounts
	isSet bool
}

func (v NullableBlueprintAccounts) Get() *BlueprintAccounts {
	return v.value
}

func (v *NullableBlueprintAccounts) Set(val *BlueprintAccounts) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintAccounts) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintAccounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintAccounts(val *BlueprintAccounts) *NullableBlueprintAccounts {
	return &NullableBlueprintAccounts{value: val, isSet: true}
}

func (v NullableBlueprintAccounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintAccounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


