/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BlueprintDnfRepositoriesInnerUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintDnfRepositoriesInnerUsage{}

// BlueprintDnfRepositoriesInnerUsage struct for BlueprintDnfRepositoriesInnerUsage
type BlueprintDnfRepositoriesInnerUsage struct {
	// Configure the repository for dnf.  A repository will be saved to the /etc/yum.repos.d directory in an image. An optional filename argument can be set, otherwise the repository will be saved using the the repository ID, i.e. /etc/yum.repos.d/<repo-id>.repo.
	Configure *bool `json:"configure,omitempty"`
	// Use the repository for image build.  When this flag is set, it is possible to install third-party packages during the image build.
	Install *bool `json:"install,omitempty"`
}

// NewBlueprintDnfRepositoriesInnerUsage instantiates a new BlueprintDnfRepositoriesInnerUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintDnfRepositoriesInnerUsage() *BlueprintDnfRepositoriesInnerUsage {
	this := BlueprintDnfRepositoriesInnerUsage{}
	var configure bool = true
	this.Configure = &configure
	var install bool = false
	this.Install = &install
	return &this
}

// NewBlueprintDnfRepositoriesInnerUsageWithDefaults instantiates a new BlueprintDnfRepositoriesInnerUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintDnfRepositoriesInnerUsageWithDefaults() *BlueprintDnfRepositoriesInnerUsage {
	this := BlueprintDnfRepositoriesInnerUsage{}
	var configure bool = true
	this.Configure = &configure
	var install bool = false
	this.Install = &install
	return &this
}

// GetConfigure returns the Configure field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInnerUsage) GetConfigure() bool {
	if o == nil || IsNil(o.Configure) {
		var ret bool
		return ret
	}
	return *o.Configure
}

// GetConfigureOk returns a tuple with the Configure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInnerUsage) GetConfigureOk() (*bool, bool) {
	if o == nil || IsNil(o.Configure) {
		return nil, false
	}
	return o.Configure, true
}

// HasConfigure returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInnerUsage) HasConfigure() bool {
	if o != nil && !IsNil(o.Configure) {
		return true
	}

	return false
}

// SetConfigure gets a reference to the given bool and assigns it to the Configure field.
func (o *BlueprintDnfRepositoriesInnerUsage) SetConfigure(v bool) {
	o.Configure = &v
}

// GetInstall returns the Install field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInnerUsage) GetInstall() bool {
	if o == nil || IsNil(o.Install) {
		var ret bool
		return ret
	}
	return *o.Install
}

// GetInstallOk returns a tuple with the Install field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInnerUsage) GetInstallOk() (*bool, bool) {
	if o == nil || IsNil(o.Install) {
		return nil, false
	}
	return o.Install, true
}

// HasInstall returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInnerUsage) HasInstall() bool {
	if o != nil && !IsNil(o.Install) {
		return true
	}

	return false
}

// SetInstall gets a reference to the given bool and assigns it to the Install field.
func (o *BlueprintDnfRepositoriesInnerUsage) SetInstall(v bool) {
	o.Install = &v
}

func (o BlueprintDnfRepositoriesInnerUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintDnfRepositoriesInnerUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Configure) {
		toSerialize["configure"] = o.Configure
	}
	if !IsNil(o.Install) {
		toSerialize["install"] = o.Install
	}
	return toSerialize, nil
}

type NullableBlueprintDnfRepositoriesInnerUsage struct {
	value *BlueprintDnfRepositoriesInnerUsage
	isSet bool
}

func (v NullableBlueprintDnfRepositoriesInnerUsage) Get() *BlueprintDnfRepositoriesInnerUsage {
	return v.value
}

func (v *NullableBlueprintDnfRepositoriesInnerUsage) Set(val *BlueprintDnfRepositoriesInnerUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintDnfRepositoriesInnerUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintDnfRepositoriesInnerUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintDnfRepositoriesInnerUsage(val *BlueprintDnfRepositoriesInnerUsage) *NullableBlueprintDnfRepositoriesInnerUsage {
	return &NullableBlueprintDnfRepositoriesInnerUsage{value: val, isSet: true}
}

func (v NullableBlueprintDnfRepositoriesInnerUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintDnfRepositoriesInnerUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


