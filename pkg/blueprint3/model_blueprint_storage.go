/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlueprintStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintStorage{}

// BlueprintStorage struct for BlueprintStorage
type BlueprintStorage struct {
	// Device partitioning type: gpt (default) or mbr.
	Type string `json:"type"`
	// Minimum size of the storage device. When not set, the image size is acquired from image request.  Size must be formatted as an integer followed by whitespace and then either a decimal unit (B, KB/kB, MB, GB, TB, PB, EB) or binary unit (KiB, MiB, GiB, TiB, PiB, EiB).
	Minsize string `json:"minsize" validate:"regexp=^\\\\d+\\\\s*[BKkMGTPE]i?[BKMGTPE]?$"`
	// Partitions of the following types: plain (default), lvm, or btrfs.
	Partitions []BlueprintStoragePartitionsInner `json:"partitions"`
}

type _BlueprintStorage BlueprintStorage

// NewBlueprintStorage instantiates a new BlueprintStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintStorage(type_ string, minsize string, partitions []BlueprintStoragePartitionsInner) *BlueprintStorage {
	this := BlueprintStorage{}
	this.Type = type_
	this.Minsize = minsize
	this.Partitions = partitions
	return &this
}

// NewBlueprintStorageWithDefaults instantiates a new BlueprintStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintStorageWithDefaults() *BlueprintStorage {
	this := BlueprintStorage{}
	var type_ string = "gpt"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *BlueprintStorage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BlueprintStorage) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BlueprintStorage) SetType(v string) {
	o.Type = v
}

// GetMinsize returns the Minsize field value
func (o *BlueprintStorage) GetMinsize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Minsize
}

// GetMinsizeOk returns a tuple with the Minsize field value
// and a boolean to check if the value has been set.
func (o *BlueprintStorage) GetMinsizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Minsize, true
}

// SetMinsize sets field value
func (o *BlueprintStorage) SetMinsize(v string) {
	o.Minsize = v
}

// GetPartitions returns the Partitions field value
func (o *BlueprintStorage) GetPartitions() []BlueprintStoragePartitionsInner {
	if o == nil {
		var ret []BlueprintStoragePartitionsInner
		return ret
	}

	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value
// and a boolean to check if the value has been set.
func (o *BlueprintStorage) GetPartitionsOk() ([]BlueprintStoragePartitionsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Partitions, true
}

// SetPartitions sets field value
func (o *BlueprintStorage) SetPartitions(v []BlueprintStoragePartitionsInner) {
	o.Partitions = v
}

func (o BlueprintStorage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["minsize"] = o.Minsize
	toSerialize["partitions"] = o.Partitions
	return toSerialize, nil
}

func (o *BlueprintStorage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"minsize",
		"partitions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlueprintStorage := _BlueprintStorage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlueprintStorage)

	if err != nil {
		return err
	}

	*o = BlueprintStorage(varBlueprintStorage)

	return err
}

type NullableBlueprintStorage struct {
	value *BlueprintStorage
	isSet bool
}

func (v NullableBlueprintStorage) Get() *BlueprintStorage {
	return v.value
}

func (v *NullableBlueprintStorage) Set(val *BlueprintStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintStorage(val *BlueprintStorage) *NullableBlueprintStorage {
	return &NullableBlueprintStorage{value: val, isSet: true}
}

func (v NullableBlueprintStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


