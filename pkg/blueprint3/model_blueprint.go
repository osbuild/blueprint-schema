/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Blueprint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Blueprint{}

// Blueprint Image Builder new blueprint schema.  THIS IS WORK IN PROGRESS
type Blueprint struct {
	// The description attribute is a string that can be a longer description of the blueprint and is only used for display purposes.
	Description *string `json:"description,omitempty"`
	Accounts *BlueprintAccounts `json:"accounts,omitempty"`
	// The CA certificates to be added to the image. The certificates are added to the system-wide CA trust store. The certificates are added to the /etc/pki/ca-trust/source/anchors/ directory and the update-ca-trust command is run to update the system-wide CA trust store.
	Cacerts []BlueprintCacertsInner `json:"cacerts,omitempty"`
	// Containers to be pulled during the image build and stored in the image at the default local container storage location that is appropriate for the image type, so that all supported container tools like podman and cri-o will be able to work with it. The embedded containers are not started, to do so you can create systemd unit files or quadlets with the files customization.
	Containers []BlueprintContainersInner `json:"containers,omitempty"`
	Dnf *BlueprintDnf `json:"dnf,omitempty"`
	Fips *BlueprintFips `json:"fips,omitempty"`
	// File system nodes details.  You can use the customization to create new files or to replace existing ones, if not restricted by the policy specified below. If the target path is an existing symlink to another file, the symlink will be replaced by the custom file.  Please note that the parent directory of a specified file must exist. If it does not exist, the image build will fail. One can ensure that the parent directory exists by specifying \"ensure_parents\".  In addition, the following files are not allowed to be created or replaced by policy: /etc/fstab, /etc/shadow, /etc/passwd and /etc/group.  Using the files customization comes with a high chance of creating an image that doesn't boot. Use this feature only if you know what you are doing. Although the files customization can be used to configure parts of the OS which can also be configured by other blueprint customizations, this use is discouraged. If possible, users should always default to using the specialized blueprint customizations. Note that if you combine the files customizations with other customizations, the other customizations may not work as expected or may be overridden by the files customizations.  You can create custom directories as well. The existence of a specified directory is handled gracefully only if no explicit mode, user or group is specified. If any of these customizations are specified and the directory already exists in the image, the image build will fail. The intention is to prevent changing the ownership or permissions of existing directories.
	Fsnodes []BlueprintFsnodesInner `json:"fsnodes,omitempty"`
	// Hostname is an optional string that can be used to configure the hostname of the final image.
	Hostname *string `json:"hostname,omitempty"`
	Ignition NullableBlueprintIgnition `json:"ignition,omitempty"`
	Installer *BlueprintInstaller `json:"installer,omitempty"`
	Kernel *BlueprintKernel `json:"kernel,omitempty"`
	Locale *BlueprintLocale `json:"locale,omitempty"`
	// The name attribute is a string that contains the name of the blueprint. It can contain spaces, but they may be converted to dash characters during build. It should be short and descriptive.
	Name string `json:"name"`
	Network *BlueprintNetwork `json:"network,omitempty"`
	Openscap *BlueprintOpenscap `json:"openscap,omitempty"`
	Registration *BlueprintRegistration `json:"registration,omitempty"`
	Storage *BlueprintStorage `json:"storage,omitempty"`
	Systemd *BlueprintSystemd `json:"systemd,omitempty"`
	Timedate *BlueprintTimedate `json:"timedate,omitempty"`
}

type _Blueprint Blueprint

// NewBlueprint instantiates a new Blueprint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprint(name string) *Blueprint {
	this := Blueprint{}
	this.Name = name
	return &this
}

// NewBlueprintWithDefaults instantiates a new Blueprint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintWithDefaults() *Blueprint {
	this := Blueprint{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Blueprint) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Blueprint) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Blueprint) SetDescription(v string) {
	o.Description = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *Blueprint) GetAccounts() BlueprintAccounts {
	if o == nil || IsNil(o.Accounts) {
		var ret BlueprintAccounts
		return ret
	}
	return *o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetAccountsOk() (*BlueprintAccounts, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *Blueprint) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given BlueprintAccounts and assigns it to the Accounts field.
func (o *Blueprint) SetAccounts(v BlueprintAccounts) {
	o.Accounts = &v
}

// GetCacerts returns the Cacerts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Blueprint) GetCacerts() []BlueprintCacertsInner {
	if o == nil {
		var ret []BlueprintCacertsInner
		return ret
	}
	return o.Cacerts
}

// GetCacertsOk returns a tuple with the Cacerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Blueprint) GetCacertsOk() ([]BlueprintCacertsInner, bool) {
	if o == nil || IsNil(o.Cacerts) {
		return nil, false
	}
	return o.Cacerts, true
}

// HasCacerts returns a boolean if a field has been set.
func (o *Blueprint) HasCacerts() bool {
	if o != nil && !IsNil(o.Cacerts) {
		return true
	}

	return false
}

// SetCacerts gets a reference to the given []BlueprintCacertsInner and assigns it to the Cacerts field.
func (o *Blueprint) SetCacerts(v []BlueprintCacertsInner) {
	o.Cacerts = v
}

// GetContainers returns the Containers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Blueprint) GetContainers() []BlueprintContainersInner {
	if o == nil {
		var ret []BlueprintContainersInner
		return ret
	}
	return o.Containers
}

// GetContainersOk returns a tuple with the Containers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Blueprint) GetContainersOk() ([]BlueprintContainersInner, bool) {
	if o == nil || IsNil(o.Containers) {
		return nil, false
	}
	return o.Containers, true
}

// HasContainers returns a boolean if a field has been set.
func (o *Blueprint) HasContainers() bool {
	if o != nil && !IsNil(o.Containers) {
		return true
	}

	return false
}

// SetContainers gets a reference to the given []BlueprintContainersInner and assigns it to the Containers field.
func (o *Blueprint) SetContainers(v []BlueprintContainersInner) {
	o.Containers = v
}

// GetDnf returns the Dnf field value if set, zero value otherwise.
func (o *Blueprint) GetDnf() BlueprintDnf {
	if o == nil || IsNil(o.Dnf) {
		var ret BlueprintDnf
		return ret
	}
	return *o.Dnf
}

// GetDnfOk returns a tuple with the Dnf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetDnfOk() (*BlueprintDnf, bool) {
	if o == nil || IsNil(o.Dnf) {
		return nil, false
	}
	return o.Dnf, true
}

// HasDnf returns a boolean if a field has been set.
func (o *Blueprint) HasDnf() bool {
	if o != nil && !IsNil(o.Dnf) {
		return true
	}

	return false
}

// SetDnf gets a reference to the given BlueprintDnf and assigns it to the Dnf field.
func (o *Blueprint) SetDnf(v BlueprintDnf) {
	o.Dnf = &v
}

// GetFips returns the Fips field value if set, zero value otherwise.
func (o *Blueprint) GetFips() BlueprintFips {
	if o == nil || IsNil(o.Fips) {
		var ret BlueprintFips
		return ret
	}
	return *o.Fips
}

// GetFipsOk returns a tuple with the Fips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetFipsOk() (*BlueprintFips, bool) {
	if o == nil || IsNil(o.Fips) {
		return nil, false
	}
	return o.Fips, true
}

// HasFips returns a boolean if a field has been set.
func (o *Blueprint) HasFips() bool {
	if o != nil && !IsNil(o.Fips) {
		return true
	}

	return false
}

// SetFips gets a reference to the given BlueprintFips and assigns it to the Fips field.
func (o *Blueprint) SetFips(v BlueprintFips) {
	o.Fips = &v
}

// GetFsnodes returns the Fsnodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Blueprint) GetFsnodes() []BlueprintFsnodesInner {
	if o == nil {
		var ret []BlueprintFsnodesInner
		return ret
	}
	return o.Fsnodes
}

// GetFsnodesOk returns a tuple with the Fsnodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Blueprint) GetFsnodesOk() ([]BlueprintFsnodesInner, bool) {
	if o == nil || IsNil(o.Fsnodes) {
		return nil, false
	}
	return o.Fsnodes, true
}

// HasFsnodes returns a boolean if a field has been set.
func (o *Blueprint) HasFsnodes() bool {
	if o != nil && !IsNil(o.Fsnodes) {
		return true
	}

	return false
}

// SetFsnodes gets a reference to the given []BlueprintFsnodesInner and assigns it to the Fsnodes field.
func (o *Blueprint) SetFsnodes(v []BlueprintFsnodesInner) {
	o.Fsnodes = v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *Blueprint) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *Blueprint) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *Blueprint) SetHostname(v string) {
	o.Hostname = &v
}

// GetIgnition returns the Ignition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Blueprint) GetIgnition() BlueprintIgnition {
	if o == nil || IsNil(o.Ignition.Get()) {
		var ret BlueprintIgnition
		return ret
	}
	return *o.Ignition.Get()
}

// GetIgnitionOk returns a tuple with the Ignition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Blueprint) GetIgnitionOk() (*BlueprintIgnition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ignition.Get(), o.Ignition.IsSet()
}

// HasIgnition returns a boolean if a field has been set.
func (o *Blueprint) HasIgnition() bool {
	if o != nil && o.Ignition.IsSet() {
		return true
	}

	return false
}

// SetIgnition gets a reference to the given NullableBlueprintIgnition and assigns it to the Ignition field.
func (o *Blueprint) SetIgnition(v BlueprintIgnition) {
	o.Ignition.Set(&v)
}
// SetIgnitionNil sets the value for Ignition to be an explicit nil
func (o *Blueprint) SetIgnitionNil() {
	o.Ignition.Set(nil)
}

// UnsetIgnition ensures that no value is present for Ignition, not even an explicit nil
func (o *Blueprint) UnsetIgnition() {
	o.Ignition.Unset()
}

// GetInstaller returns the Installer field value if set, zero value otherwise.
func (o *Blueprint) GetInstaller() BlueprintInstaller {
	if o == nil || IsNil(o.Installer) {
		var ret BlueprintInstaller
		return ret
	}
	return *o.Installer
}

// GetInstallerOk returns a tuple with the Installer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetInstallerOk() (*BlueprintInstaller, bool) {
	if o == nil || IsNil(o.Installer) {
		return nil, false
	}
	return o.Installer, true
}

// HasInstaller returns a boolean if a field has been set.
func (o *Blueprint) HasInstaller() bool {
	if o != nil && !IsNil(o.Installer) {
		return true
	}

	return false
}

// SetInstaller gets a reference to the given BlueprintInstaller and assigns it to the Installer field.
func (o *Blueprint) SetInstaller(v BlueprintInstaller) {
	o.Installer = &v
}

// GetKernel returns the Kernel field value if set, zero value otherwise.
func (o *Blueprint) GetKernel() BlueprintKernel {
	if o == nil || IsNil(o.Kernel) {
		var ret BlueprintKernel
		return ret
	}
	return *o.Kernel
}

// GetKernelOk returns a tuple with the Kernel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetKernelOk() (*BlueprintKernel, bool) {
	if o == nil || IsNil(o.Kernel) {
		return nil, false
	}
	return o.Kernel, true
}

// HasKernel returns a boolean if a field has been set.
func (o *Blueprint) HasKernel() bool {
	if o != nil && !IsNil(o.Kernel) {
		return true
	}

	return false
}

// SetKernel gets a reference to the given BlueprintKernel and assigns it to the Kernel field.
func (o *Blueprint) SetKernel(v BlueprintKernel) {
	o.Kernel = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *Blueprint) GetLocale() BlueprintLocale {
	if o == nil || IsNil(o.Locale) {
		var ret BlueprintLocale
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetLocaleOk() (*BlueprintLocale, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *Blueprint) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given BlueprintLocale and assigns it to the Locale field.
func (o *Blueprint) SetLocale(v BlueprintLocale) {
	o.Locale = &v
}

// GetName returns the Name field value
func (o *Blueprint) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Blueprint) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Blueprint) SetName(v string) {
	o.Name = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Blueprint) GetNetwork() BlueprintNetwork {
	if o == nil || IsNil(o.Network) {
		var ret BlueprintNetwork
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetNetworkOk() (*BlueprintNetwork, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Blueprint) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given BlueprintNetwork and assigns it to the Network field.
func (o *Blueprint) SetNetwork(v BlueprintNetwork) {
	o.Network = &v
}

// GetOpenscap returns the Openscap field value if set, zero value otherwise.
func (o *Blueprint) GetOpenscap() BlueprintOpenscap {
	if o == nil || IsNil(o.Openscap) {
		var ret BlueprintOpenscap
		return ret
	}
	return *o.Openscap
}

// GetOpenscapOk returns a tuple with the Openscap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetOpenscapOk() (*BlueprintOpenscap, bool) {
	if o == nil || IsNil(o.Openscap) {
		return nil, false
	}
	return o.Openscap, true
}

// HasOpenscap returns a boolean if a field has been set.
func (o *Blueprint) HasOpenscap() bool {
	if o != nil && !IsNil(o.Openscap) {
		return true
	}

	return false
}

// SetOpenscap gets a reference to the given BlueprintOpenscap and assigns it to the Openscap field.
func (o *Blueprint) SetOpenscap(v BlueprintOpenscap) {
	o.Openscap = &v
}

// GetRegistration returns the Registration field value if set, zero value otherwise.
func (o *Blueprint) GetRegistration() BlueprintRegistration {
	if o == nil || IsNil(o.Registration) {
		var ret BlueprintRegistration
		return ret
	}
	return *o.Registration
}

// GetRegistrationOk returns a tuple with the Registration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetRegistrationOk() (*BlueprintRegistration, bool) {
	if o == nil || IsNil(o.Registration) {
		return nil, false
	}
	return o.Registration, true
}

// HasRegistration returns a boolean if a field has been set.
func (o *Blueprint) HasRegistration() bool {
	if o != nil && !IsNil(o.Registration) {
		return true
	}

	return false
}

// SetRegistration gets a reference to the given BlueprintRegistration and assigns it to the Registration field.
func (o *Blueprint) SetRegistration(v BlueprintRegistration) {
	o.Registration = &v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *Blueprint) GetStorage() BlueprintStorage {
	if o == nil || IsNil(o.Storage) {
		var ret BlueprintStorage
		return ret
	}
	return *o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetStorageOk() (*BlueprintStorage, bool) {
	if o == nil || IsNil(o.Storage) {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *Blueprint) HasStorage() bool {
	if o != nil && !IsNil(o.Storage) {
		return true
	}

	return false
}

// SetStorage gets a reference to the given BlueprintStorage and assigns it to the Storage field.
func (o *Blueprint) SetStorage(v BlueprintStorage) {
	o.Storage = &v
}

// GetSystemd returns the Systemd field value if set, zero value otherwise.
func (o *Blueprint) GetSystemd() BlueprintSystemd {
	if o == nil || IsNil(o.Systemd) {
		var ret BlueprintSystemd
		return ret
	}
	return *o.Systemd
}

// GetSystemdOk returns a tuple with the Systemd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetSystemdOk() (*BlueprintSystemd, bool) {
	if o == nil || IsNil(o.Systemd) {
		return nil, false
	}
	return o.Systemd, true
}

// HasSystemd returns a boolean if a field has been set.
func (o *Blueprint) HasSystemd() bool {
	if o != nil && !IsNil(o.Systemd) {
		return true
	}

	return false
}

// SetSystemd gets a reference to the given BlueprintSystemd and assigns it to the Systemd field.
func (o *Blueprint) SetSystemd(v BlueprintSystemd) {
	o.Systemd = &v
}

// GetTimedate returns the Timedate field value if set, zero value otherwise.
func (o *Blueprint) GetTimedate() BlueprintTimedate {
	if o == nil || IsNil(o.Timedate) {
		var ret BlueprintTimedate
		return ret
	}
	return *o.Timedate
}

// GetTimedateOk returns a tuple with the Timedate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blueprint) GetTimedateOk() (*BlueprintTimedate, bool) {
	if o == nil || IsNil(o.Timedate) {
		return nil, false
	}
	return o.Timedate, true
}

// HasTimedate returns a boolean if a field has been set.
func (o *Blueprint) HasTimedate() bool {
	if o != nil && !IsNil(o.Timedate) {
		return true
	}

	return false
}

// SetTimedate gets a reference to the given BlueprintTimedate and assigns it to the Timedate field.
func (o *Blueprint) SetTimedate(v BlueprintTimedate) {
	o.Timedate = &v
}

func (o Blueprint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Blueprint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if o.Cacerts != nil {
		toSerialize["cacerts"] = o.Cacerts
	}
	if o.Containers != nil {
		toSerialize["containers"] = o.Containers
	}
	if !IsNil(o.Dnf) {
		toSerialize["dnf"] = o.Dnf
	}
	if !IsNil(o.Fips) {
		toSerialize["fips"] = o.Fips
	}
	if o.Fsnodes != nil {
		toSerialize["fsnodes"] = o.Fsnodes
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if o.Ignition.IsSet() {
		toSerialize["ignition"] = o.Ignition.Get()
	}
	if !IsNil(o.Installer) {
		toSerialize["installer"] = o.Installer
	}
	if !IsNil(o.Kernel) {
		toSerialize["kernel"] = o.Kernel
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.Openscap) {
		toSerialize["openscap"] = o.Openscap
	}
	if !IsNil(o.Registration) {
		toSerialize["registration"] = o.Registration
	}
	if !IsNil(o.Storage) {
		toSerialize["storage"] = o.Storage
	}
	if !IsNil(o.Systemd) {
		toSerialize["systemd"] = o.Systemd
	}
	if !IsNil(o.Timedate) {
		toSerialize["timedate"] = o.Timedate
	}
	return toSerialize, nil
}

func (o *Blueprint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlueprint := _Blueprint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlueprint)

	if err != nil {
		return err
	}

	*o = Blueprint(varBlueprint)

	return err
}

type NullableBlueprint struct {
	value *Blueprint
	isSet bool
}

func (v NullableBlueprint) Get() *Blueprint {
	return v.value
}

func (v *NullableBlueprint) Set(val *Blueprint) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprint) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprint(val *Blueprint) *NullableBlueprint {
	return &NullableBlueprint{value: val, isSet: true}
}

func (v NullableBlueprint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


