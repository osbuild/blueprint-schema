/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlueprintDnfRepositoriesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintDnfRepositoriesInner{}

// BlueprintDnfRepositoriesInner struct for BlueprintDnfRepositoriesInner
type BlueprintDnfRepositoriesInner struct {
	// Repository ID. Required.
	Id string
	// Base URLs for the repository.
	BaseUrls []string
	// Repository filename to use for the repository configuration file. If not provided, the ID is used. Filename must be provided without the .repo extension.
	Filename *string
	// Enable GPG check for the repository.
	GpgCheck *bool
	// Enable GPG check for the repository metadata.
	GpgCheckRepo *bool
	// GPG keys for the repository.  The blueprint accepts both inline GPG keys and GPG key urls. If an inline GPG key is provided it will be saved to the /etc/pki/rpm-gpg directory and will be referenced accordingly in the repository configuration. GPG keys are not imported to the RPM database and will only be imported when first installing a package from the third-party repository.
	GpgKeys []string
	// Metalink for the repository.
	Metalink *string
	// Mirror list for the repository.
	MirrorList *string
	// Enable module hotfixes for the repository.  Adds module_hotfixes flag to all repo types so it can be used during osbuild. This enables users to disable modularity filtering on specific repositories.
	ModuleHotfixes *bool
	// Repository name.
	Name *string
	// Repository priority.
	Priority *int32
	// Enable SSL verification for the repository.
	SslVerify *bool
	Usage *BlueprintDnfRepositoriesInnerUsage
}

type _BlueprintDnfRepositoriesInner BlueprintDnfRepositoriesInner

// NewBlueprintDnfRepositoriesInner instantiates a new BlueprintDnfRepositoriesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintDnfRepositoriesInner(id string) *BlueprintDnfRepositoriesInner {
	this := BlueprintDnfRepositoriesInner{}
	return &this
}

// NewBlueprintDnfRepositoriesInnerWithDefaults instantiates a new BlueprintDnfRepositoriesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintDnfRepositoriesInnerWithDefaults() *BlueprintDnfRepositoriesInner {
	this := BlueprintDnfRepositoriesInner{}
	var gpgCheck bool = true
	this.GpgCheck = &gpgCheck
	var gpgCheckRepo bool = true
	this.GpgCheckRepo = &gpgCheckRepo
	var moduleHotfixes bool = false
	this.ModuleHotfixes = &moduleHotfixes
	var priority int32 = 99
	this.Priority = &priority
	var sslVerify bool = true
	this.SslVerify = &sslVerify
	return &this
}

// GetId returns the Id field value
func (o *BlueprintDnfRepositoriesInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BlueprintDnfRepositoriesInner) SetId(v string) {
	o.Id = v
}

// GetBaseUrls returns the BaseUrls field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInner) GetBaseUrls() []string {
	if o == nil || IsNil(o.BaseUrls) {
		var ret []string
		return ret
	}
	return o.BaseUrls
}

// GetBaseUrlsOk returns a tuple with the BaseUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInner) GetBaseUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.BaseUrls) {
		return nil, false
	}
	return o.BaseUrls, true
}

// HasBaseUrls returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInner) HasBaseUrls() bool {
	if o != nil && !IsNil(o.BaseUrls) {
		return true
	}

	return false
}

// SetBaseUrls gets a reference to the given []string and assigns it to the BaseUrls field.
func (o *BlueprintDnfRepositoriesInner) SetBaseUrls(v []string) {
	o.BaseUrls = v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInner) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInner) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInner) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *BlueprintDnfRepositoriesInner) SetFilename(v string) {
	o.Filename = &v
}

// GetGpgCheck returns the GpgCheck field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInner) GetGpgCheck() bool {
	if o == nil || IsNil(o.GpgCheck) {
		var ret bool
		return ret
	}
	return *o.GpgCheck
}

// GetGpgCheckOk returns a tuple with the GpgCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInner) GetGpgCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.GpgCheck) {
		return nil, false
	}
	return o.GpgCheck, true
}

// HasGpgCheck returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInner) HasGpgCheck() bool {
	if o != nil && !IsNil(o.GpgCheck) {
		return true
	}

	return false
}

// SetGpgCheck gets a reference to the given bool and assigns it to the GpgCheck field.
func (o *BlueprintDnfRepositoriesInner) SetGpgCheck(v bool) {
	o.GpgCheck = &v
}

// GetGpgCheckRepo returns the GpgCheckRepo field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInner) GetGpgCheckRepo() bool {
	if o == nil || IsNil(o.GpgCheckRepo) {
		var ret bool
		return ret
	}
	return *o.GpgCheckRepo
}

// GetGpgCheckRepoOk returns a tuple with the GpgCheckRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInner) GetGpgCheckRepoOk() (*bool, bool) {
	if o == nil || IsNil(o.GpgCheckRepo) {
		return nil, false
	}
	return o.GpgCheckRepo, true
}

// HasGpgCheckRepo returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInner) HasGpgCheckRepo() bool {
	if o != nil && !IsNil(o.GpgCheckRepo) {
		return true
	}

	return false
}

// SetGpgCheckRepo gets a reference to the given bool and assigns it to the GpgCheckRepo field.
func (o *BlueprintDnfRepositoriesInner) SetGpgCheckRepo(v bool) {
	o.GpgCheckRepo = &v
}

// GetGpgKeys returns the GpgKeys field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInner) GetGpgKeys() []string {
	if o == nil || IsNil(o.GpgKeys) {
		var ret []string
		return ret
	}
	return o.GpgKeys
}

// GetGpgKeysOk returns a tuple with the GpgKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInner) GetGpgKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.GpgKeys) {
		return nil, false
	}
	return o.GpgKeys, true
}

// HasGpgKeys returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInner) HasGpgKeys() bool {
	if o != nil && !IsNil(o.GpgKeys) {
		return true
	}

	return false
}

// SetGpgKeys gets a reference to the given []string and assigns it to the GpgKeys field.
func (o *BlueprintDnfRepositoriesInner) SetGpgKeys(v []string) {
	o.GpgKeys = v
}

// GetMetalink returns the Metalink field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInner) GetMetalink() string {
	if o == nil || IsNil(o.Metalink) {
		var ret string
		return ret
	}
	return *o.Metalink
}

// GetMetalinkOk returns a tuple with the Metalink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInner) GetMetalinkOk() (*string, bool) {
	if o == nil || IsNil(o.Metalink) {
		return nil, false
	}
	return o.Metalink, true
}

// HasMetalink returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInner) HasMetalink() bool {
	if o != nil && !IsNil(o.Metalink) {
		return true
	}

	return false
}

// SetMetalink gets a reference to the given string and assigns it to the Metalink field.
func (o *BlueprintDnfRepositoriesInner) SetMetalink(v string) {
	o.Metalink = &v
}

// GetMirrorList returns the MirrorList field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInner) GetMirrorList() string {
	if o == nil || IsNil(o.MirrorList) {
		var ret string
		return ret
	}
	return *o.MirrorList
}

// GetMirrorListOk returns a tuple with the MirrorList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInner) GetMirrorListOk() (*string, bool) {
	if o == nil || IsNil(o.MirrorList) {
		return nil, false
	}
	return o.MirrorList, true
}

// HasMirrorList returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInner) HasMirrorList() bool {
	if o != nil && !IsNil(o.MirrorList) {
		return true
	}

	return false
}

// SetMirrorList gets a reference to the given string and assigns it to the MirrorList field.
func (o *BlueprintDnfRepositoriesInner) SetMirrorList(v string) {
	o.MirrorList = &v
}

// GetModuleHotfixes returns the ModuleHotfixes field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInner) GetModuleHotfixes() bool {
	if o == nil || IsNil(o.ModuleHotfixes) {
		var ret bool
		return ret
	}
	return *o.ModuleHotfixes
}

// GetModuleHotfixesOk returns a tuple with the ModuleHotfixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInner) GetModuleHotfixesOk() (*bool, bool) {
	if o == nil || IsNil(o.ModuleHotfixes) {
		return nil, false
	}
	return o.ModuleHotfixes, true
}

// HasModuleHotfixes returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInner) HasModuleHotfixes() bool {
	if o != nil && !IsNil(o.ModuleHotfixes) {
		return true
	}

	return false
}

// SetModuleHotfixes gets a reference to the given bool and assigns it to the ModuleHotfixes field.
func (o *BlueprintDnfRepositoriesInner) SetModuleHotfixes(v bool) {
	o.ModuleHotfixes = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BlueprintDnfRepositoriesInner) SetName(v string) {
	o.Name = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInner) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInner) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInner) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *BlueprintDnfRepositoriesInner) SetPriority(v int32) {
	o.Priority = &v
}

// GetSslVerify returns the SslVerify field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInner) GetSslVerify() bool {
	if o == nil || IsNil(o.SslVerify) {
		var ret bool
		return ret
	}
	return *o.SslVerify
}

// GetSslVerifyOk returns a tuple with the SslVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInner) GetSslVerifyOk() (*bool, bool) {
	if o == nil || IsNil(o.SslVerify) {
		return nil, false
	}
	return o.SslVerify, true
}

// HasSslVerify returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInner) HasSslVerify() bool {
	if o != nil && !IsNil(o.SslVerify) {
		return true
	}

	return false
}

// SetSslVerify gets a reference to the given bool and assigns it to the SslVerify field.
func (o *BlueprintDnfRepositoriesInner) SetSslVerify(v bool) {
	o.SslVerify = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *BlueprintDnfRepositoriesInner) GetUsage() BlueprintDnfRepositoriesInnerUsage {
	if o == nil || IsNil(o.Usage) {
		var ret BlueprintDnfRepositoriesInnerUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintDnfRepositoriesInner) GetUsageOk() (*BlueprintDnfRepositoriesInnerUsage, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *BlueprintDnfRepositoriesInner) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given BlueprintDnfRepositoriesInnerUsage and assigns it to the Usage field.
func (o *BlueprintDnfRepositoriesInner) SetUsage(v BlueprintDnfRepositoriesInnerUsage) {
	o.Usage = &v
}

func (o BlueprintDnfRepositoriesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintDnfRepositoriesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.BaseUrls) {
		toSerialize["base_urls"] = o.BaseUrls
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.GpgCheck) {
		toSerialize["gpg_check"] = o.GpgCheck
	}
	if !IsNil(o.GpgCheckRepo) {
		toSerialize["gpg_check_repo"] = o.GpgCheckRepo
	}
	if !IsNil(o.GpgKeys) {
		toSerialize["gpg_keys"] = o.GpgKeys
	}
	if !IsNil(o.Metalink) {
		toSerialize["metalink"] = o.Metalink
	}
	if !IsNil(o.MirrorList) {
		toSerialize["mirror_list"] = o.MirrorList
	}
	if !IsNil(o.ModuleHotfixes) {
		toSerialize["module_hotfixes"] = o.ModuleHotfixes
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.SslVerify) {
		toSerialize["ssl_verify"] = o.SslVerify
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

func (o *BlueprintDnfRepositoriesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlueprintDnfRepositoriesInner := _BlueprintDnfRepositoriesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlueprintDnfRepositoriesInner)

	if err != nil {
		return err
	}

	*o = BlueprintDnfRepositoriesInner(varBlueprintDnfRepositoriesInner)

	return err
}

type NullableBlueprintDnfRepositoriesInner struct {
	value *BlueprintDnfRepositoriesInner
	isSet bool
}

func (v NullableBlueprintDnfRepositoriesInner) Get() *BlueprintDnfRepositoriesInner {
	return v.value
}

func (v *NullableBlueprintDnfRepositoriesInner) Set(val *BlueprintDnfRepositoriesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintDnfRepositoriesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintDnfRepositoriesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintDnfRepositoriesInner(val *BlueprintDnfRepositoriesInner) *NullableBlueprintDnfRepositoriesInner {
	return &NullableBlueprintDnfRepositoriesInner{value: val, isSet: true}
}

func (v NullableBlueprintDnfRepositoriesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintDnfRepositoriesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


