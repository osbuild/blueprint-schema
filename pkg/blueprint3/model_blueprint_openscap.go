/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlueprintOpenscap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintOpenscap{}

// BlueprintOpenscap struct for BlueprintOpenscap
type BlueprintOpenscap struct {
	// Datastream to use for the scan. The datastream is the path to the SCAP datastream file to use for the scan. If the datastream parameter is not provided, a sensible default based on the selected distro will be chosen.
	Datastream *string `json:"datastream,omitempty"`
	// The desired security profile ID.
	ProfileId string `json:"profile_id"`
	Tailoring NullableAnyOf `json:"tailoring,omitempty"`
}

type _BlueprintOpenscap BlueprintOpenscap

// NewBlueprintOpenscap instantiates a new BlueprintOpenscap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintOpenscap(profileId string) *BlueprintOpenscap {
	this := BlueprintOpenscap{}
	this.ProfileId = profileId
	return &this
}

// NewBlueprintOpenscapWithDefaults instantiates a new BlueprintOpenscap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintOpenscapWithDefaults() *BlueprintOpenscap {
	this := BlueprintOpenscap{}
	return &this
}

// GetDatastream returns the Datastream field value if set, zero value otherwise.
func (o *BlueprintOpenscap) GetDatastream() string {
	if o == nil || IsNil(o.Datastream) {
		var ret string
		return ret
	}
	return *o.Datastream
}

// GetDatastreamOk returns a tuple with the Datastream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintOpenscap) GetDatastreamOk() (*string, bool) {
	if o == nil || IsNil(o.Datastream) {
		return nil, false
	}
	return o.Datastream, true
}

// HasDatastream returns a boolean if a field has been set.
func (o *BlueprintOpenscap) HasDatastream() bool {
	if o != nil && !IsNil(o.Datastream) {
		return true
	}

	return false
}

// SetDatastream gets a reference to the given string and assigns it to the Datastream field.
func (o *BlueprintOpenscap) SetDatastream(v string) {
	o.Datastream = &v
}

// GetProfileId returns the ProfileId field value
func (o *BlueprintOpenscap) GetProfileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value
// and a boolean to check if the value has been set.
func (o *BlueprintOpenscap) GetProfileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileId, true
}

// SetProfileId sets field value
func (o *BlueprintOpenscap) SetProfileId(v string) {
	o.ProfileId = v
}

// GetTailoring returns the Tailoring field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintOpenscap) GetTailoring() AnyOf {
	if o == nil || IsNil(o.Tailoring.Get()) {
		var ret AnyOf
		return ret
	}
	return *o.Tailoring.Get()
}

// GetTailoringOk returns a tuple with the Tailoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintOpenscap) GetTailoringOk() (*AnyOf, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tailoring.Get(), o.Tailoring.IsSet()
}

// HasTailoring returns a boolean if a field has been set.
func (o *BlueprintOpenscap) HasTailoring() bool {
	if o != nil && o.Tailoring.IsSet() {
		return true
	}

	return false
}

// SetTailoring gets a reference to the given NullableAnyOf and assigns it to the Tailoring field.
func (o *BlueprintOpenscap) SetTailoring(v AnyOf) {
	o.Tailoring.Set(&v)
}
// SetTailoringNil sets the value for Tailoring to be an explicit nil
func (o *BlueprintOpenscap) SetTailoringNil() {
	o.Tailoring.Set(nil)
}

// UnsetTailoring ensures that no value is present for Tailoring, not even an explicit nil
func (o *BlueprintOpenscap) UnsetTailoring() {
	o.Tailoring.Unset()
}

func (o BlueprintOpenscap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintOpenscap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datastream) {
		toSerialize["datastream"] = o.Datastream
	}
	toSerialize["profile_id"] = o.ProfileId
	if o.Tailoring.IsSet() {
		toSerialize["tailoring"] = o.Tailoring.Get()
	}
	return toSerialize, nil
}

func (o *BlueprintOpenscap) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"profile_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlueprintOpenscap := _BlueprintOpenscap{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlueprintOpenscap)

	if err != nil {
		return err
	}

	*o = BlueprintOpenscap(varBlueprintOpenscap)

	return err
}

type NullableBlueprintOpenscap struct {
	value *BlueprintOpenscap
	isSet bool
}

func (v NullableBlueprintOpenscap) Get() *BlueprintOpenscap {
	return v.value
}

func (v *NullableBlueprintOpenscap) Set(val *BlueprintOpenscap) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintOpenscap) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintOpenscap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintOpenscap(val *BlueprintOpenscap) *NullableBlueprintOpenscap {
	return &NullableBlueprintOpenscap{value: val, isSet: true}
}

func (v NullableBlueprintOpenscap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintOpenscap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


