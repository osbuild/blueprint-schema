/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BlueprintDnf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintDnf{}

// BlueprintDnf struct for BlueprintDnf
type BlueprintDnf struct {
	// Groups to install, must match exactly. Groups describes groups of packages to be installed into the image. Package groups are defined in the repository metadata. Each group has a descriptive name used primarily for display in user interfaces and an ID more commonly used in kickstart files. Here, the ID is the expected way of listing a group. Groups have three different ways of categorizing their packages: mandatory, default, and optional. For the purposes of blueprints, only mandatory and default packages will be installed. There is no mechanism for selecting optional packages.
	Groups []string `json:"groups,omitempty"`
	// Additional file paths to the GPG keys to import. The files must be present in the image. Does not support importing from URLs.
	ImportKeys []string `json:"import_keys,omitempty"`
	// Modules to enable or disable
	Modules []string `json:"modules,omitempty"`
	// Packages to install. Package name or NVRA is accepted as long as DNF can resolve it. Examples: vim-enhanced, vim-enhanced-9.1.866-1 or vim-enhanced-9.1.866-1.fc41.x86_64. The packages can also be specified as @group_name to install all packages in the group.
	Packages []string `json:"packages,omitempty"`
	// Third-party repositories are supported by the blueprint customizations.  All fields reflect configuration values of dnf, see man dnf.conf(5) for more information.
	Repositories []BlueprintDnfRepositoriesInner `json:"repositories,omitempty"`
}

// NewBlueprintDnf instantiates a new BlueprintDnf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintDnf() *BlueprintDnf {
	this := BlueprintDnf{}
	return &this
}

// NewBlueprintDnfWithDefaults instantiates a new BlueprintDnf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintDnfWithDefaults() *BlueprintDnf {
	this := BlueprintDnf{}
	return &this
}

// GetGroups returns the Groups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintDnf) GetGroups() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintDnf) GetGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *BlueprintDnf) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *BlueprintDnf) SetGroups(v []string) {
	o.Groups = v
}

// GetImportKeys returns the ImportKeys field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintDnf) GetImportKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ImportKeys
}

// GetImportKeysOk returns a tuple with the ImportKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintDnf) GetImportKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.ImportKeys) {
		return nil, false
	}
	return o.ImportKeys, true
}

// HasImportKeys returns a boolean if a field has been set.
func (o *BlueprintDnf) HasImportKeys() bool {
	if o != nil && !IsNil(o.ImportKeys) {
		return true
	}

	return false
}

// SetImportKeys gets a reference to the given []string and assigns it to the ImportKeys field.
func (o *BlueprintDnf) SetImportKeys(v []string) {
	o.ImportKeys = v
}

// GetModules returns the Modules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintDnf) GetModules() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Modules
}

// GetModulesOk returns a tuple with the Modules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintDnf) GetModulesOk() ([]string, bool) {
	if o == nil || IsNil(o.Modules) {
		return nil, false
	}
	return o.Modules, true
}

// HasModules returns a boolean if a field has been set.
func (o *BlueprintDnf) HasModules() bool {
	if o != nil && !IsNil(o.Modules) {
		return true
	}

	return false
}

// SetModules gets a reference to the given []string and assigns it to the Modules field.
func (o *BlueprintDnf) SetModules(v []string) {
	o.Modules = v
}

// GetPackages returns the Packages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintDnf) GetPackages() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Packages
}

// GetPackagesOk returns a tuple with the Packages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintDnf) GetPackagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Packages) {
		return nil, false
	}
	return o.Packages, true
}

// HasPackages returns a boolean if a field has been set.
func (o *BlueprintDnf) HasPackages() bool {
	if o != nil && !IsNil(o.Packages) {
		return true
	}

	return false
}

// SetPackages gets a reference to the given []string and assigns it to the Packages field.
func (o *BlueprintDnf) SetPackages(v []string) {
	o.Packages = v
}

// GetRepositories returns the Repositories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlueprintDnf) GetRepositories() []BlueprintDnfRepositoriesInner {
	if o == nil {
		var ret []BlueprintDnfRepositoriesInner
		return ret
	}
	return o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlueprintDnf) GetRepositoriesOk() ([]BlueprintDnfRepositoriesInner, bool) {
	if o == nil || IsNil(o.Repositories) {
		return nil, false
	}
	return o.Repositories, true
}

// HasRepositories returns a boolean if a field has been set.
func (o *BlueprintDnf) HasRepositories() bool {
	if o != nil && !IsNil(o.Repositories) {
		return true
	}

	return false
}

// SetRepositories gets a reference to the given []BlueprintDnfRepositoriesInner and assigns it to the Repositories field.
func (o *BlueprintDnf) SetRepositories(v []BlueprintDnfRepositoriesInner) {
	o.Repositories = v
}

func (o BlueprintDnf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintDnf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.ImportKeys != nil {
		toSerialize["import_keys"] = o.ImportKeys
	}
	if o.Modules != nil {
		toSerialize["modules"] = o.Modules
	}
	if o.Packages != nil {
		toSerialize["packages"] = o.Packages
	}
	if o.Repositories != nil {
		toSerialize["repositories"] = o.Repositories
	}
	return toSerialize, nil
}

type NullableBlueprintDnf struct {
	value *BlueprintDnf
	isSet bool
}

func (v NullableBlueprintDnf) Get() *BlueprintDnf {
	return v.value
}

func (v *NullableBlueprintDnf) Set(val *BlueprintDnf) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintDnf) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintDnf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintDnf(val *BlueprintDnf) *NullableBlueprintDnf {
	return &NullableBlueprintDnf{value: val, isSet: true}
}

func (v NullableBlueprintDnf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintDnf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


