/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlueprintTimedate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintTimedate{}

// BlueprintTimedate struct for BlueprintTimedate
type BlueprintTimedate struct {
	// An optional list of strings containing NTP servers to use. If not provided the distribution defaults are used
	NtpServers []string `json:"ntp_servers,omitempty"`
	// System time zone. Defaults to UTC. To list available time zones run: timedatectl list-timezones
	Timezone string `json:"timezone"`
}

type _BlueprintTimedate BlueprintTimedate

// NewBlueprintTimedate instantiates a new BlueprintTimedate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintTimedate(timezone string) *BlueprintTimedate {
	this := BlueprintTimedate{}
	this.Timezone = timezone
	return &this
}

// NewBlueprintTimedateWithDefaults instantiates a new BlueprintTimedate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintTimedateWithDefaults() *BlueprintTimedate {
	this := BlueprintTimedate{}
	var timezone string = "UTC"
	this.Timezone = timezone
	return &this
}

// GetNtpServers returns the NtpServers field value if set, zero value otherwise.
func (o *BlueprintTimedate) GetNtpServers() []string {
	if o == nil || IsNil(o.NtpServers) {
		var ret []string
		return ret
	}
	return o.NtpServers
}

// GetNtpServersOk returns a tuple with the NtpServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintTimedate) GetNtpServersOk() ([]string, bool) {
	if o == nil || IsNil(o.NtpServers) {
		return nil, false
	}
	return o.NtpServers, true
}

// HasNtpServers returns a boolean if a field has been set.
func (o *BlueprintTimedate) HasNtpServers() bool {
	if o != nil && !IsNil(o.NtpServers) {
		return true
	}

	return false
}

// SetNtpServers gets a reference to the given []string and assigns it to the NtpServers field.
func (o *BlueprintTimedate) SetNtpServers(v []string) {
	o.NtpServers = v
}

// GetTimezone returns the Timezone field value
func (o *BlueprintTimedate) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *BlueprintTimedate) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *BlueprintTimedate) SetTimezone(v string) {
	o.Timezone = v
}

func (o BlueprintTimedate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintTimedate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NtpServers) {
		toSerialize["ntp_servers"] = o.NtpServers
	}
	toSerialize["timezone"] = o.Timezone
	return toSerialize, nil
}

func (o *BlueprintTimedate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timezone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlueprintTimedate := _BlueprintTimedate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlueprintTimedate)

	if err != nil {
		return err
	}

	*o = BlueprintTimedate(varBlueprintTimedate)

	return err
}

type NullableBlueprintTimedate struct {
	value *BlueprintTimedate
	isSet bool
}

func (v NullableBlueprintTimedate) Get() *BlueprintTimedate {
	return v.value
}

func (v *NullableBlueprintTimedate) Set(val *BlueprintTimedate) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintTimedate) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintTimedate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintTimedate(val *BlueprintTimedate) *NullableBlueprintTimedate {
	return &NullableBlueprintTimedate{value: val, isSet: true}
}

func (v NullableBlueprintTimedate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintTimedate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


