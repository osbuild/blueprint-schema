/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlueprintAccountsGroupsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintAccountsGroupsInner{}

// BlueprintAccountsGroupsInner struct for BlueprintAccountsGroupsInner
type BlueprintAccountsGroupsInner struct {
	// The group ID (GID) of the group.
	Gid *int32 `json:"gid,omitempty"`
	// Group name. Accepted characters: lowercase letters, digits, underscores, dollars, and hyphens. Name must not start with a hyphen. Maximum length is 256 characters. The validation pattern is a relaxed version of https://github.com/shadow-maint/shadow/blob/master/lib/chkname.c
	Name string `json:"name" validate:"regexp=^[a-zA-Z0-9_.][a-zA-Z0-9_.$-]*$"`
}

type _BlueprintAccountsGroupsInner BlueprintAccountsGroupsInner

// NewBlueprintAccountsGroupsInner instantiates a new BlueprintAccountsGroupsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintAccountsGroupsInner(name string) *BlueprintAccountsGroupsInner {
	this := BlueprintAccountsGroupsInner{}
	this.Name = name
	return &this
}

// NewBlueprintAccountsGroupsInnerWithDefaults instantiates a new BlueprintAccountsGroupsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintAccountsGroupsInnerWithDefaults() *BlueprintAccountsGroupsInner {
	this := BlueprintAccountsGroupsInner{}
	return &this
}

// GetGid returns the Gid field value if set, zero value otherwise.
func (o *BlueprintAccountsGroupsInner) GetGid() int32 {
	if o == nil || IsNil(o.Gid) {
		var ret int32
		return ret
	}
	return *o.Gid
}

// GetGidOk returns a tuple with the Gid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintAccountsGroupsInner) GetGidOk() (*int32, bool) {
	if o == nil || IsNil(o.Gid) {
		return nil, false
	}
	return o.Gid, true
}

// HasGid returns a boolean if a field has been set.
func (o *BlueprintAccountsGroupsInner) HasGid() bool {
	if o != nil && !IsNil(o.Gid) {
		return true
	}

	return false
}

// SetGid gets a reference to the given int32 and assigns it to the Gid field.
func (o *BlueprintAccountsGroupsInner) SetGid(v int32) {
	o.Gid = &v
}

// GetName returns the Name field value
func (o *BlueprintAccountsGroupsInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BlueprintAccountsGroupsInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BlueprintAccountsGroupsInner) SetName(v string) {
	o.Name = v
}

func (o BlueprintAccountsGroupsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintAccountsGroupsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Gid) {
		toSerialize["gid"] = o.Gid
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *BlueprintAccountsGroupsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlueprintAccountsGroupsInner := _BlueprintAccountsGroupsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlueprintAccountsGroupsInner)

	if err != nil {
		return err
	}

	*o = BlueprintAccountsGroupsInner(varBlueprintAccountsGroupsInner)

	return err
}

type NullableBlueprintAccountsGroupsInner struct {
	value *BlueprintAccountsGroupsInner
	isSet bool
}

func (v NullableBlueprintAccountsGroupsInner) Get() *BlueprintAccountsGroupsInner {
	return v.value
}

func (v *NullableBlueprintAccountsGroupsInner) Set(val *BlueprintAccountsGroupsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintAccountsGroupsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintAccountsGroupsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintAccountsGroupsInner(val *BlueprintAccountsGroupsInner) *NullableBlueprintAccountsGroupsInner {
	return &NullableBlueprintAccountsGroupsInner{value: val, isSet: true}
}

func (v NullableBlueprintAccountsGroupsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintAccountsGroupsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


