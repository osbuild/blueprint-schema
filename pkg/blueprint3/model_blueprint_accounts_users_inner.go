/*
Blueprint schema

Image Builder Blueprint  WORK IN PROGRESS 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlueprintAccountsUsersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlueprintAccountsUsersInner{}

// BlueprintAccountsUsersInner struct for BlueprintAccountsUsersInner
type BlueprintAccountsUsersInner struct {
	// A longer description of the account.
	Description *string `json:"description,omitempty"`
	// Date type which accepts date (YYYY-MM-DD) or date-time (RFC3339) format and only marshals into date format. This is needed for JSON/YAML compatibility since YAML automatically converts strings which look like dates into time.Time.
	Expires *string `json:"expires,omitempty" validate:"regexp=^\\\\d{4}-\\\\d{2}-\\\\d{2}T?[0-9:Z-]*"`
	// The primary group ID (GID) of the user. Value of zero (or ommited value) means that the next available UID will be assigned.
	Gid *int32 `json:"gid,omitempty"`
	// Additional groups that the user should be a member of.
	Groups []string `json:"groups,omitempty"`
	// The home directory of the user.
	Home *string `json:"home,omitempty"`
	// Account name. Accepted characters: lowercase letters, digits, underscores, dollars, and hyphens. Name must not start with a hyphen. Maximum length is 256 characters. The validation pattern is a relaxed version of https://github.com/shadow-maint/shadow/blob/master/lib/chkname.c
	Name string `json:"name" validate:"regexp=^[a-zA-Z0-9_.][a-zA-Z0-9_.$-]*$"`
	// Password either in plain text or encrypted form. If the password is not provided, the account will be locked and the user will not be able to log in with a password. The password can be encrypted using the crypt(3) function. The format of the encrypted password is $id$salt$hashed, where $id is the algorithm used (1, 5, 6, or 2a).
	Password *string `json:"password,omitempty"`
	// The shell of the user.
	Shell *string `json:"shell,omitempty"`
	// SSH keys to be added to the account's authorized_keys file.
	SshKeys []string `json:"ssh_keys,omitempty"`
	// The user ID (UID) of the user. Value of zero (or ommited value) means that the next available UID will be assigned.
	Uid *int32 `json:"uid,omitempty"`
}

type _BlueprintAccountsUsersInner BlueprintAccountsUsersInner

// NewBlueprintAccountsUsersInner instantiates a new BlueprintAccountsUsersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlueprintAccountsUsersInner(name string) *BlueprintAccountsUsersInner {
	this := BlueprintAccountsUsersInner{}
	this.Name = name
	return &this
}

// NewBlueprintAccountsUsersInnerWithDefaults instantiates a new BlueprintAccountsUsersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlueprintAccountsUsersInnerWithDefaults() *BlueprintAccountsUsersInner {
	this := BlueprintAccountsUsersInner{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BlueprintAccountsUsersInner) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintAccountsUsersInner) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BlueprintAccountsUsersInner) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BlueprintAccountsUsersInner) SetDescription(v string) {
	o.Description = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *BlueprintAccountsUsersInner) GetExpires() string {
	if o == nil || IsNil(o.Expires) {
		var ret string
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintAccountsUsersInner) GetExpiresOk() (*string, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *BlueprintAccountsUsersInner) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given string and assigns it to the Expires field.
func (o *BlueprintAccountsUsersInner) SetExpires(v string) {
	o.Expires = &v
}

// GetGid returns the Gid field value if set, zero value otherwise.
func (o *BlueprintAccountsUsersInner) GetGid() int32 {
	if o == nil || IsNil(o.Gid) {
		var ret int32
		return ret
	}
	return *o.Gid
}

// GetGidOk returns a tuple with the Gid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintAccountsUsersInner) GetGidOk() (*int32, bool) {
	if o == nil || IsNil(o.Gid) {
		return nil, false
	}
	return o.Gid, true
}

// HasGid returns a boolean if a field has been set.
func (o *BlueprintAccountsUsersInner) HasGid() bool {
	if o != nil && !IsNil(o.Gid) {
		return true
	}

	return false
}

// SetGid gets a reference to the given int32 and assigns it to the Gid field.
func (o *BlueprintAccountsUsersInner) SetGid(v int32) {
	o.Gid = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *BlueprintAccountsUsersInner) GetGroups() []string {
	if o == nil || IsNil(o.Groups) {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintAccountsUsersInner) GetGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *BlueprintAccountsUsersInner) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *BlueprintAccountsUsersInner) SetGroups(v []string) {
	o.Groups = v
}

// GetHome returns the Home field value if set, zero value otherwise.
func (o *BlueprintAccountsUsersInner) GetHome() string {
	if o == nil || IsNil(o.Home) {
		var ret string
		return ret
	}
	return *o.Home
}

// GetHomeOk returns a tuple with the Home field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintAccountsUsersInner) GetHomeOk() (*string, bool) {
	if o == nil || IsNil(o.Home) {
		return nil, false
	}
	return o.Home, true
}

// HasHome returns a boolean if a field has been set.
func (o *BlueprintAccountsUsersInner) HasHome() bool {
	if o != nil && !IsNil(o.Home) {
		return true
	}

	return false
}

// SetHome gets a reference to the given string and assigns it to the Home field.
func (o *BlueprintAccountsUsersInner) SetHome(v string) {
	o.Home = &v
}

// GetName returns the Name field value
func (o *BlueprintAccountsUsersInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BlueprintAccountsUsersInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BlueprintAccountsUsersInner) SetName(v string) {
	o.Name = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *BlueprintAccountsUsersInner) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintAccountsUsersInner) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *BlueprintAccountsUsersInner) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *BlueprintAccountsUsersInner) SetPassword(v string) {
	o.Password = &v
}

// GetShell returns the Shell field value if set, zero value otherwise.
func (o *BlueprintAccountsUsersInner) GetShell() string {
	if o == nil || IsNil(o.Shell) {
		var ret string
		return ret
	}
	return *o.Shell
}

// GetShellOk returns a tuple with the Shell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintAccountsUsersInner) GetShellOk() (*string, bool) {
	if o == nil || IsNil(o.Shell) {
		return nil, false
	}
	return o.Shell, true
}

// HasShell returns a boolean if a field has been set.
func (o *BlueprintAccountsUsersInner) HasShell() bool {
	if o != nil && !IsNil(o.Shell) {
		return true
	}

	return false
}

// SetShell gets a reference to the given string and assigns it to the Shell field.
func (o *BlueprintAccountsUsersInner) SetShell(v string) {
	o.Shell = &v
}

// GetSshKeys returns the SshKeys field value if set, zero value otherwise.
func (o *BlueprintAccountsUsersInner) GetSshKeys() []string {
	if o == nil || IsNil(o.SshKeys) {
		var ret []string
		return ret
	}
	return o.SshKeys
}

// GetSshKeysOk returns a tuple with the SshKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintAccountsUsersInner) GetSshKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.SshKeys) {
		return nil, false
	}
	return o.SshKeys, true
}

// HasSshKeys returns a boolean if a field has been set.
func (o *BlueprintAccountsUsersInner) HasSshKeys() bool {
	if o != nil && !IsNil(o.SshKeys) {
		return true
	}

	return false
}

// SetSshKeys gets a reference to the given []string and assigns it to the SshKeys field.
func (o *BlueprintAccountsUsersInner) SetSshKeys(v []string) {
	o.SshKeys = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *BlueprintAccountsUsersInner) GetUid() int32 {
	if o == nil || IsNil(o.Uid) {
		var ret int32
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlueprintAccountsUsersInner) GetUidOk() (*int32, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *BlueprintAccountsUsersInner) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given int32 and assigns it to the Uid field.
func (o *BlueprintAccountsUsersInner) SetUid(v int32) {
	o.Uid = &v
}

func (o BlueprintAccountsUsersInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlueprintAccountsUsersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.Gid) {
		toSerialize["gid"] = o.Gid
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Home) {
		toSerialize["home"] = o.Home
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Shell) {
		toSerialize["shell"] = o.Shell
	}
	if !IsNil(o.SshKeys) {
		toSerialize["ssh_keys"] = o.SshKeys
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	return toSerialize, nil
}

func (o *BlueprintAccountsUsersInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlueprintAccountsUsersInner := _BlueprintAccountsUsersInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlueprintAccountsUsersInner)

	if err != nil {
		return err
	}

	*o = BlueprintAccountsUsersInner(varBlueprintAccountsUsersInner)

	return err
}

type NullableBlueprintAccountsUsersInner struct {
	value *BlueprintAccountsUsersInner
	isSet bool
}

func (v NullableBlueprintAccountsUsersInner) Get() *BlueprintAccountsUsersInner {
	return v.value
}

func (v *NullableBlueprintAccountsUsersInner) Set(val *BlueprintAccountsUsersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableBlueprintAccountsUsersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableBlueprintAccountsUsersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlueprintAccountsUsersInner(val *BlueprintAccountsUsersInner) *NullableBlueprintAccountsUsersInner {
	return &NullableBlueprintAccountsUsersInner{value: val, isSet: true}
}

func (v NullableBlueprintAccountsUsersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlueprintAccountsUsersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


